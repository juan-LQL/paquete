devtools::use_vignette
library(devtools)
?mtcars
usethis::use_data(mtcars)
devtools::use_data
library(testthat)
expect_that(sqrt(3) * sqrt(3), equals(3))
expect_that(sqrt(3) * sqrt(3), equals(3))
expect_that(sqrt(3) * sqrt(3), equals(3))
expect_that(sqrt(3) * sqrt(3), equals(2))
expect_that('holo', equals('hola'))
expect_that('hoo', equals('hola'))
a <- expect_that(sqrt(3) * sqrt(3), equals(3))
a
test_dir()
is.na(a) <- 2
a
a
rm(a)
a
is.na(a) <- 2
a <- c(NA, 2)
is.na(a) <- 2
a
a <- c(NA, 2)
a
library(readr)
accident_2013 <- read_csv("assignment1/accident_2013.csv")
View(accident_2013)
#' Title
#'
#' @param filename
#'
#' @return
#' @export
#'
#' @examples
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
#' Title
#'
#' @param year
#'
#' @return
#' @export
#'
#' @examples
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
#' Title
#'
#' @param years
#'
#' @return
#' @export
#'
#' @examples
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
#' Title
#'
#' @param years
#'
#' @return
#' @export
#'
#' @examples
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
#' Title
#'
#' @param state.num
#' @param year
#'
#' @return
#' @export
#'
#' @examples
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_read(filename = 'assignment1/accident_2013.csv')
rm(accident_2013)
acc13 <- fars_read(filename = 'assignment1/accident_2013.csv')
acc13 <- fars_read(filename = 'assignment1/accident_2013.cs')
make_filename(20)
View(acc13)
fars_read_years(2013)
setwd("~/Documents/paquete/assignment1")
fars_read_years(2013)
fars_read_years(2013)
getwd
getwd()
fars_read('accident_2013.csv')
fars_read('accident_2013.csv2')
make_filename(2013)
fars_read_years(2013)
years=2013
file <- make_filename(year)
year=2013
file <- make_filename(year)
file
dat <- fars_read(file)
fars_read(file)
fars_read('accident_2013.csv2')
fars_read('accident_2013.csv.bz2')
fars_read('accident_2013.csv.bz2')
#' Read all FARS files matching the specified years
#'
#' @param years Vector of size 1 or bigger with the wanted years to be read
#'
#' @return
#' @export
#'
#' @examples
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
fars_read_years(2013)
fars_read_years(c(2013, 2014))
#' Read a Fatality Analysis Reporting System file
#'
#' @param filename A string containing the path and name of the file
#'
#' @return A data frame containing the table in the CSV file
#' @export
#'
#' @examples
#' fars_2013 <- fars_read(filename = 'accident_2013.csv')
#' head(fars_2013)
#' @importFrom readr read_csv
#' @importFrom dplyr tbl_df
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
#' Create the filename according to a specified year
#'
#' @param year Integer that indicates the year of the data
#'
#' @return A string containing the name the file should have.
#'
#' @examples
#' fname <- make_filename(2020)
#' print(fname)
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
#' Read all FARS files matching the specified years
#'
#' @param years Vector of size 1 or bigger with the wanted years to be read
#'
#' @return A list of length equal to \code{length(years)}, each element containing a tibble with the variables \code{MONTH} and \code{year}
#'
#' @examples
#' fars_read_years(c(2013, 2014))
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
#' Title
#'
#' @param years
#'
#' @return
#' @export
#'
#' @examples
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
#' Title
#'
#' @param state.num
#' @param year
#'
#' @return
#' @export
#'
#' @examples
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
?fars_read_years
fars_summarize_years(c(2013, 2014))
years=c(2013,2014)
dat_list <- fars_read_years(years)
dat_list
dplyr::bind_rows(dat_list)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n())
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n())
#' Title
#'
#' @param years
#'
#' @return
#' @export
#'
#' @examples
#'
#' @importFrom dplyr group_by summarize n
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(c(2013, 2014))
?n
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = dplyr::n()) %>%
tidyr::spread(year, n)
fars_summarize_years(c(2013, 2014))
#' @param years
#'
#' @return
#' @export
#'
#' @examples
#'
#' @importFrom dplyr group_by summarize
#'
#' @note The function will return an error if dplyr::n() is no used instead of just n()
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = dplyr::n()) %>%
tidyr::spread(year, n)
}
fars_summarize_years(c(2013, 2014))
fars_map_state(1,2013)
fars_map_state(51,2013)
fars_map_state(52,2013)
fars_map_state(3,2013)
fars_map_state(2,2013)
fars_map_state(1,2013)
View(acc13)
View(acc1fsd3)
fars_map_state(56,2013)
#'
#' @return This function is used for its side-effect.
#' @export
#'
#' @importFrom dplyr filter
#' @importFrom maps map
#' @importFrom graphics points
#'
#' @examples
#' fars_map_state(1,2013)
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
# is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
# is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_map_state(56,2013)
expect_that(2+2, equals(4))
expect_that(2+2, equals(5))
is_a(class = 'df')
is_a(class = 'df')
isatty()
View(fars_summarize_years)
